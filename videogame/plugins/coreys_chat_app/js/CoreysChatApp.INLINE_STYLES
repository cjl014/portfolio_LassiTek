'use strict'

/**
//////      ====    ==     ====    ====  \\   //    //////
//////    //      //  \\  || _//  ||___   \\ //     //////
//////	  \\      \\  //  || //   ||       | |      //////
//////	    ====    ==    || \\    ====    | |      //////
//////==============================================//////

App Name: Corey's Chat App
App Nickname: CCA
Version:
**/

/** Namespace closure - CoreysChatApp **/
var CoreysChatApp = (function() {
	
	/** Add CSS **/
	var cssLink = document.createElement("link");
	cssLink.href = "css/chat_main.css";
	cssLink.rel = "stylesheet"; 
	cssLink.type = "text/css";
	document.head.appendChild(cssLink);
	
	/** Global Variables **/
	var database = firebase.database();
	var dbRef = database.ref();
	var dbUsersRef = database.ref("Users");
	var dbMessageRef = database.ref("Messages");
	var chatAppContainer;
	var settings = {};
	var chatLoginPage;
	var chatMenuWindow;
	var chatWindow;
	var chatUsersWindow;
	var chatBox;

	
	/** Class - CoreysChatApp **/
	class CoreysChatApp{
		constructor(elementId, userSettings){
			this.defaultSettings = {
				'mainColor': 'lightslategrey',
				'buttonColor': '',
				'appWidth': '100%',
				'appHeight': '100%',
				'chatWindowColor': '#f2f2f2'
			}
			chatAppContainer = document.getElementById(elementId);
			
			this.addSettings(userSettings);
			this.initialize();
		}
		
		
		// Adds the users settings to the default settings
		addSettings(userSettings){
			for (var defaultProp in this.defaultSettings){
				for (var userProp in userSettings){
					if(userSettings[userProp] != "" && userSettings[userProp] != undefined){
						if(defaultProp == userProp)
							this.defaultSettings[defaultProp] = userSettings[userProp];
					}
				}
			}
			settings = this.defaultSettings;
		}
		
		
		// Creates the initial page and starts the chat app
		initialize(){
			chatLoginPage = new ChatLoginPage();
			
			chatLoginPage.render();
			chatLoginPage.authentication();
		}
	}
	
	
	
	/** Class/Constructor - ChatLoginPage **/
	class ChatLoginPage{
		constructor(){
			this.cca_div = document.createElement("div");
			this.fieldset = document.createElement("fieldset");
			this.legend = document.createElement("legend");
			this.loader_img = document.createElement("img");
			this.login_div = document.createElement("div");
			this.login_btn = document.createElement("button");
		}
		
		// Creates the login page
		render(){
			
			
			this.cca_div.className = "cca_auth";
			this.legend.innerHTML = "Corey's Chat App";
			this.loader_img.src = "images/loader.gif";
			this.loader_img.className = "cca_loader_gif";
			this.login_div.className = "cca_signupOrLogin";
			this.login_btn.className = "cca_signIn_btn";
			this.login_btn.innerHTML = "Sign In";
			this.login_btn.style.backgroundColor = settings.buttonColor;
			
			this.cca_div.appendChild(this.fieldset);
			this.cca_div.style.backgroundColor = settings.mainColor;
			this.cca_div.style.width = settings.appWidth;
			this.cca_div.style.height = settings.appHeight;
			this.fieldset.appendChild(this.legend);
			this.fieldset.appendChild(this.loader_img);
			this.fieldset.appendChild(this.login_div);
			this.fieldset.style.height = "100%";
			this.fieldset.style.borderRadius = "25px";
			this.fieldset.style.padding = "0px";
			this.fieldset.style.fontSize = "x-large";
			this.fieldset.style.textAlign = "center";
			this.login_div.appendChild(this.login_btn);
			this.login_div.style.backgroundColor = settings.mainColor;
			chatAppContainer.appendChild(this.cca_div);	
			
			/** --- View of how the HTML should look like ---
				<div class="cca_auth">
					<fieldset>
						<legend>Corey's Chat App</legend>
						<img class="cca_loader_gif" src="images/loader.gif" >
						<div class="cca_signupOrLogin">
							<button class="cca_signIn_btn" >Sign In</button>
						</div>
					</fieldset>
				</div>'
			**/	

		}
		
		
		authentication(){
		var that = this;
		var supportClass = new SupportClass();
		
		/**Set event listeners**/
		function eventListeners() {
			
			// When user clicks the "Sign In" button, log them in as an anonymous user
			that.login_btn.onclick = function() {
				that.login_div.remove();
				that.loader_img.style.display = "block";
				
				firebase.auth().signInAnonymously().catch(function(error) {
					// Handle Errors here.
					var errorCode = error.code;
					var errorMessage = error.message;
					console.log("Error on Sign-In!: " + errorCode + " " + errorMessage);
				});
			}
			
			var onAuthFunction = function(currentUser) {
				if (currentUser) {
					var users;
					var userValue = "";
					var limit = 2;
					var userCount = 0;
					// User is signed in.
					dbUsersRef.once('value').then(function(data) {
						users = data.val();
						
						// Check if user id is already in database for online users
						for (var key in users){
							userValue = users[key];
							if(userValue != "offline"){
								userCount++;
							}
						}
						// Check if user limit is reached
						if(userCount == limit){
							alert("The maximum amount of users have been reached. Please wait for a user to logout, refresh, and try again.");
							
							chatAppContainer.innerHTML = "";
							chatLoginPage.render();
						}
						else{
							var isUserInDatabase = false;
							var usersArray = [];
							var userValue = "";
							var users = {};
							var objUpdate = {};
							chatMenuWindow = new ChatMenuWindow();
							chatWindow = new ChatWindow();
							chatUsersWindow = new ChatUsersWindow();
							chatBox = new ChatBox();
							
							chatAppContainer.removeChild(that.cca_div);
							
							supportClass.removeMessagesFromDatabase();
							chatMenuWindow.render()
							chatWindow.render();
							chatUsersWindow.render();
							chatBox.render();
							
							// Loops through the database of users (There should only be 2 users)
							dbUsersRef.on('child_added', function(data) {
								users[data.key] = data.val();
								
								if(Object.keys(users).length == 2){
									// Check if user id is already in database for online users
									for (var key in users){
										userValue = users[key];
										if(userValue == currentUser.uid){
											isUserInDatabase = true;
											break;
										}
									}
									
									// If user is not in database, add them to an 'offline' slot
									if(isUserInDatabase == false){ 
										for (var key in users){
											userValue = users[key];
											// Update the user database with the uid of the current user
											if(userValue == "offline" ){
												objUpdate[key] = currentUser.uid; //tip: use this instead of computed property because IE doesn't support
												dbUsersRef.update(objUpdate);
												var dbUserRef = database.ref("Users/" + key);
												dbUserRef.onDisconnect().set("offline");
												break;
											}
										}	
									}
								}	
							});	
						}
					});
				} else {
					// User is signed out.
					console.log("not logged in");
				}
			};
			
			if(firebase.auth().hasListener() == false)
				firebase.auth().onAuthStateChanged(onAuthFunction);  // When user authorization state has changed..
		}
		
		eventListeners();
		}
	}
	
	
	
	
	/** Class - ChatMenuWindow **/
	class ChatMenuWindow{
		constructor() {
			this.menu_div = document.createElement("div");
			this.logout_btn = document.createElement("button");
			this.clear_btn = document.createElement("button");
		}
		
		// Create chat menu window
		render(){
			var btn_width = "100%";
			var btn_height = "40px";
			var btn_opacity = "0.9";
			var btn_word_wrap = "break-word";
			
			this.menu_div.className = "cca_menu";
			this.menu_div.style.backgroundColor = settings.mainColor;
			this.menu_div.style.float = "left";
			this.menu_div.style.width = "10%";
			this.menu_div.style.height = settings.appHeight;
			this.menu_div.style.backgroundColor = settings.mainColor;
			this.menu_div.style.boxSizing = "border-box";
			
			this.logout_btn.className = "cca_logout_btn";
			this.logout_btn.style.backgroundColor = settings.buttonColor;
			this.logout_btn.style.width = btn_width;
			this.logout_btn.style.height = btn_height;
			this.logout_btn.style.opacity = btn_opacity;
			this.logout_btn.style.wordWrap = btn_word_wrap;
			this.logout_btn.innerHTML = "Logout";
			
			this.clear_btn.className = "cca_clear_msgs_btn";
			this.clear_btn.style.backgroundColor = settings.buttonColor;
			this.clear_btn.style.width = btn_width;
			this.clear_btn.style.height = btn_height;
			this.clear_btn.style.opacity = btn_opacity;
			this.clear_btn.style.wordWrap = btn_word_wrap;
			this.clear_btn.innerHTML = "Clear messages";
			
			this.menu_div.appendChild(this.logout_btn);
			this.menu_div.appendChild(this.clear_btn);
			chatAppContainer.appendChild(this.menu_div);
			
			/** --- View of how the HTML should look like ---
				<div class="cca_menu">
					<button class="cca_logout_btn">Logout</button>'
					<button class="cca_clear_msgs_btn" >Clear messages</button>
				</div>
			**/
			
			this.eventListeners();
		}
		
		
		
		// Deletes messages from the chat screeen
		removeMessages(){
			
			dbMessageRef.remove();
			chatWindow.td.innerHTML = "";
		}
		
		
		// Logs out of the anonymous user
		logout(){
			var users = {};
			var userValue;
			var currentUser = firebase.auth().currentUser;
			var objUpdate = {};
			
			// Loops through the database of users (There should only be 2 users)
			dbUsersRef.on('child_added', function(data) {
				users[data.key] = data.val();

				if(Object.keys(users).length == 2){
					// Check if user id is already in database for online users
					for (var key in users){
						userValue = users[key];
						if(userValue == currentUser.uid){
							objUpdate[key] = "offline"; //tip: use this instead of computed property because IE doesn't support
							dbUsersRef.update(objUpdate);
							break;
						}
					}	
				}
			});
			
			// Sign out
			firebase.auth().signOut().then(function() {
				
				// Sign-out successful.
				chatAppContainer.innerHTML = "";
				chatLoginPage.render();
				chatLoginPage.authentication();
				setTimeout(function(){ alert("You have signed out!"); }, 100); //sometimes the alert shows before showing the logged out page. This helps.
			}, 
			function(error) {
					// An error happened.
					console.log("error signing out");
					alert("error signing out");
			});
		}
		
		// Sets event listeners for chat menu window
		eventListeners(){
			var that = this;
		
			this.clear_btn.onclick = function(){
				that.removeMessages();
			}
			this.logout_btn.onclick = function(){
				that.logout();
			}
		}
		
	}
	
	
	
	
	
	
	
	
	
	/** Class - ChatWindow **/
	class ChatWindow {
		constructor() {
			this.window = document.createElement("div");
			this.table = document.createElement("table");
			this.tr = document.createElement("tr");
			this.td = document.createElement("td");
		}
		
		
		// Create HTML for the page
		render(){
			var windowHeight = "80%";
			
			this.window.className = "cca_window";
			this.window.style.float = "left";
			this.window.style.width = "70%";
			this.window.style.height = windowHeight;
			this.window.style.backgroundColor = settings.chatWindowColor;
			this.window.style.overflow = "auto";
			this.window.style.boxSizing = "border-box";
			
			this.table.className = "cca_window_table";
			this.table.style.verticalAlign = "bottom";
			this.table.style.width = "100%";
			this.table.style.height = windowHeight;
			
			this.td.className = "cca_window_td";
			this.td.style.verticalAlign = "bottom";
			this.td.style.height = windowHeight;
			this.td.style.paddingBottom = "10px";
			
			//append to html
			this.window.appendChild(this.table);
			this.table.appendChild(this.tr);
			this.tr.appendChild(this.td);
			chatAppContainer.appendChild(this.window);
			
			/** --- View of how the HTML should look like ---
				<div class="chat_window">
					<table id="chat_window_table">
						<tr>
							<td class="chat_window_td">
							</td>
						</tr>
					</table>
				</div>
			**/	
		}
	}
	
	
	
	/** Class - ChatUsersWindow **/
	class ChatUsersWindow {
		constructor() {
			this.container = document.createElement("div");
			this.titleDiv = document.createElement("div");
			this.titleSpan = document.createElement("span");
			
		}
		
		
		// Create HTML for the page
		render(){
			this.container.className = "cca_users_window";
			
			this.titleDiv.className = "cca_users_window_title";
			this.titleDiv.style.backgroundColor = settings.mainColor;
			this.titleDiv.innerHTML = "Users Window";
			
			this.titleSpan.style.fontSize = "13px";
			this.titleSpan.style.color = "lime";
			
			this.container.appendChild(this.titleDiv);
			this.titleDiv.appendChild(this.titleSpan);
			chatAppContainer.appendChild(this.container);
			
			/** --- View of how the HTML should look like ---
				<div class="cca_users_window">
					<div class="cca_users_window_title">
						Users Window 
						<span></span>
					</div>
				</div>
			**/

			this.eventListeners();
		}
		
		// Adds user to window
		addUserToWindow(name){
			var name = name;

			this.titleDiv.insertAdjacentHTML('afterend', '<div class="cca_user_div" >' + name + '</div>');
		}
		
		// Removes user from window
		removeUserFromWindow(name){
			var cca_user_divs = document.querySelectorAll("#" + chatAppContainer.id + " .cca_user_div");
			var userInWindow = "";
			
			for(var i=0; i < cca_user_divs.length; i++){
				userInWindow = cca_user_divs[i].innerHTML;
				if(name == userInWindow){
					this.container.removeChild(cca_user_divs[i]);
				}
			}
		}
		
		// Returns true if user is in the window
		userIsInWindow(name){
			var chat_user_divs = document.querySelectorAll("#" + chatAppContainer.id + " .cca_user_div");
			var userInWindow = "";
			
			for(var i=0; i < chat_user_divs.length; i++){
				userInWindow = chat_user_divs[i].innerHTML;
				if(name == userInWindow){
					return true;
				}
			}
		}
		
		// Sets event listeners for chat window
		eventListeners(){
			var that = this;

			// When the value of a user changes in the database
			dbUsersRef.on('value', function(data){
				var users = data.val();
				var userValue = "";
				
				// Loop through database users
				for (var key in users){
					userValue = users[key];
					if(userValue == "offline"){ // Remove user from window if they are offline
						that.removeUserFromWindow(key);
					}
					else if(!that.userIsInWindow(key)){ // Add user to window if they are offline
						that.addUserToWindow(key);	
					}
				}
			});
		}
	}
	
	
	
	
	/** Class/Constructor- ChatBox **/
	class ChatBox {
		constructor() {
			this.container = document.createElement("div");
			this.textBox = document.createElement("input");
			this.sendBtn = document.createElement("button");
			this.imageBtn = document.createElement("button");
			this.imageBtnImg = document.createElement("img");
			this.fileInput = document.createElement("input");
			
		}
		
		render(){
			var buttonHeight = "50px";
			var buttonWidth = "10%";
	
			this.container.className = "cca_chatbox";
			
			this.textBox.className = "cca_chat_textbox";
			this.textBox.type = "text";
			this.textBox.placeholder = "Enter message...";
			this.textBox.style.width = "60%";
			this.textBox.style.height = "50px";
			this.textBox.style.borderRadius = "20px 0px 0px 20px";
			this.textBox.style.borderBottomColor = "darkgray";
			this.textBox.style.outline = "darkgray";
			this.textBox.style.fontSize = "25px";
			this.textBox.style.color = "gray";
			this.textBox.style.float = "left";
			this.textBox.style.padding = "0px 10px";
			this.textBox.style.boxSizing = "border-box";
			
			this.sendBtn.className = "cca_send_btn";
			this.sendBtn.style.height = buttonHeight;
			this.sendBtn.style.width = buttonWidth;
			this.sendBtn.style.float = "left";
			this.sendBtn.style.boxSizing = "border-box";
			this.sendBtn.innerHTML = "Send";
			
			this.imageBtn.className = "cca_img_btn";
			this.imageBtn.style.height = buttonHeight;
			this.imageBtn.style.width = buttonWidth;
			this.imageBtn.style.float = "left";
			this.imageBtn.style.boxSizing = "border-box";
			this.imageBtn.style.backgroundColor = settings.buttonColor;
			
			this.imageBtnImg.src = "images/img_attach1.png";
			this.imageBtnImg.style.width = "100%";
			this.imageBtnImg.style.maxWidth = "50px";
			this.imageBtnImg.style.minWidth = "20px";
			this.imageBtnImg.style.backgroundColor = settings.buttonColor;
			
			this.fileInput.className = "cca_img_file";
			this.fileInput.style.visibility = "hidden";
			
			//append to HTML
			this.container.appendChild(this.textBox);
			this.container.appendChild(this.sendBtn);
			this.container.appendChild(this.imageBtn);
			this.imageBtn.appendChild(this.imageBtnImg);
			this.container.appendChild(this.fileInput);
			chatAppContainer.appendChild(this.container);
			
			/** --- View of how the HTML should look like ---
			<div class="cca_chatbox">
				<input class="cca_chat_textbox" type="text" placeholder="Enter message..." />
				<button class="cca_send_btn">Send</button>
				<button class="cca_img_btn" ><img src="images/img_attach1.png" /></button>
				<input type="file" class="cca_img_file" />
			</div>
			**/		
			
			chatWindow.window.scrollTop = chatWindow.window.scrollHeight;

			this.eventListeners();
		}
	
		sendMessage(){
			var userId = firebase.auth().currentUser.uid;
			var HTML = '<div class="sent_msg_div"><div class="chat_msg sent_msg">' + 
						this.textBox.value + 
						'</div></div>';
			if(this.textBox.value !== ""){
				dbMessageRef.remove();
				// Add message to database
				dbMessageRef.push().set({
					"message": this.textBox.value,
					"userId": userId,
					"timeStamp": "null"
				});
				chatWindow.td.insertAdjacentHTML('beforeend', HTML);
				this.textBox.value = "";
				chatWindow.window.scrollTop = chatWindow.window.scrollHeight;
			}
		}
		
		receiveMessage(message){
			var HTML = '<div class="receive_msg_div"><div class="chat_msg receive_msg">' + 
					message + 
					'</div></div>';
			chatWindow.td.insertAdjacentHTML('beforeend', HTML);
			chatWindow.window.scrollTop = chatWindow.window.scrollHeight;
		}
		
		addImage(){
			// TODO:
		}
		
		eventListeners(){
			var that = this;
			var userId = firebase.auth().currentUser.uid;
			var messages_array = [];
		
			this.sendBtn.onclick = function() {
				that.sendMessage();
			}
			this.textBox.onkeydown = function(e) {
				if(e.keyCode === 13)
					that.sendMessage();
			}
			this.imageBtn.onclick = function(e) {
				console.log(e);
				that.fileInput.click();
			}
			this.fileInput.onchange = function() {
				alert("Sorry, this feature is not available yet. :(");
			}
			dbMessageRef.on('child_added', function(data) {
				if(data.val().userId != userId){
					that.receiveMessage(data.val().message);
				}
			});
		}
	}
	

	
	/** Class - SupportClass **/
	class SupportClass{
		constructor() {
			
		}
		
		// removes messages from database
		removeMessagesFromDatabase(){
			dbMessageRef.remove();
		}
	}
	
	return CoreysChatApp;
}());
